{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ALOK\\\\OneDrive\\\\Desktop\\\\AI parking detctor\\\\frontend\\\\src\\\\components\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport { GeocoderControl } from 'leaflet-control-geocoder';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [spots, setSpots] = useState([]);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  const [map, setMap] = useState(null);\n  useEffect(() => {\n    // Fetch available parking spots from your backend API\n    axios.get('http://localhost:5000/api/parking-spots').then(response => {\n      setSpots(response.data);\n    }).catch(error => {\n      console.error(\"Error fetching parking spots\", error);\n    });\n  }, []);\n\n  // Handle city search\n  const handleSearch = async e => {\n    setSearchQuery(e.target.value);\n    if (e.target.value.length > 2) {\n      // trigger search after 2 characters\n      // Use OpenStreetMap Nominatim API to search for cities\n      const response = await axios.get(`https://nominatim.openstreetmap.org/search`, {\n        params: {\n          q: searchQuery,\n          format: 'json',\n          addressdetails: 1\n        }\n      });\n      setSearchResults(response.data);\n    }\n  };\n\n  // Add a marker for parking spots on the map\n  const addMarkers = () => {\n    return spots.map((spot, index) => /*#__PURE__*/_jsxDEV(Marker, {\n      position: [spot.latitude, spot.longitude],\n      children: /*#__PURE__*/_jsxDEV(Popup, {\n        children: spot.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this));\n  };\n\n  // Initialize map with tilt-like effect\n  useEffect(() => {\n    if (map) {\n      // Set up tilt effect (by adjusting the zoom/pitch dynamically)\n      map.setPitch(45); // Tilt the map to simulate a 3D view\n\n      // Update map on search result selection\n      if (searchResults.length > 0) {\n        const firstResult = searchResults[0];\n        map.flyTo([firstResult.lat, firstResult.lon], 12);\n      }\n    }\n  }, [map, searchResults]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Search for a city...\",\n        value: searchQuery,\n        onChange: handleSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: searchResults.map((result, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => setSearchQuery(result.display_name),\n          children: result.display_name\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: [51.505, -0.09] // Default coordinates (London)\n      ,\n      zoom: 5,\n      scrollWheelZoom: true,\n      style: {\n        width: '100%',\n        height: '500px'\n      },\n      whenCreated: setMap // Get reference to the map object\n      ,\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n        attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), addMarkers()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"sPd2NsxGTIyRjIxOlrThQmx8+HQ=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","MapContainer","TileLayer","Marker","Popup","L","GeocoderControl","axios","jsxDEV","_jsxDEV","Dashboard","_s","spots","setSpots","searchQuery","setSearchQuery","searchResults","setSearchResults","map","setMap","get","then","response","data","catch","error","console","handleSearch","e","target","value","length","params","q","format","addressdetails","addMarkers","spot","index","position","latitude","longitude","children","name","fileName","_jsxFileName","lineNumber","columnNumber","setPitch","firstResult","flyTo","lat","lon","type","placeholder","onChange","result","onClick","display_name","center","zoom","scrollWheelZoom","style","width","height","whenCreated","url","attribution","_c","$RefreshReg$"],"sources":["C:/Users/ALOK/OneDrive/Desktop/AI parking detctor/frontend/src/components/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport { GeocoderControl } from 'leaflet-control-geocoder';\r\nimport axios from 'axios';\r\n\r\nconst Dashboard = () => {\r\n  const [spots, setSpots] = useState([]);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const [map, setMap] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Fetch available parking spots from your backend API\r\n    axios.get('http://localhost:5000/api/parking-spots')\r\n      .then(response => {\r\n        setSpots(response.data);\r\n      })\r\n      .catch(error => {\r\n        console.error(\"Error fetching parking spots\", error);\r\n      });\r\n  }, []);\r\n\r\n  // Handle city search\r\n  const handleSearch = async (e) => {\r\n    setSearchQuery(e.target.value);\r\n\r\n    if (e.target.value.length > 2) { // trigger search after 2 characters\r\n      // Use OpenStreetMap Nominatim API to search for cities\r\n      const response = await axios.get(`https://nominatim.openstreetmap.org/search`, {\r\n        params: {\r\n          q: searchQuery,\r\n          format: 'json',\r\n          addressdetails: 1,\r\n        },\r\n      });\r\n\r\n      setSearchResults(response.data);\r\n    }\r\n  };\r\n\r\n  // Add a marker for parking spots on the map\r\n  const addMarkers = () => {\r\n    return spots.map((spot, index) => (\r\n      <Marker key={index} position={[spot.latitude, spot.longitude]}>\r\n        <Popup>{spot.name}</Popup>\r\n      </Marker>\r\n    ));\r\n  };\r\n\r\n  // Initialize map with tilt-like effect\r\n  useEffect(() => {\r\n    if (map) {\r\n      // Set up tilt effect (by adjusting the zoom/pitch dynamically)\r\n      map.setPitch(45); // Tilt the map to simulate a 3D view\r\n\r\n      // Update map on search result selection\r\n      if (searchResults.length > 0) {\r\n        const firstResult = searchResults[0];\r\n        map.flyTo([firstResult.lat, firstResult.lon], 12);\r\n      }\r\n    }\r\n  }, [map, searchResults]);\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Search for a city...\"\r\n          value={searchQuery}\r\n          onChange={handleSearch}\r\n        />\r\n        <ul>\r\n          {searchResults.map((result, index) => (\r\n            <li key={index} onClick={() => setSearchQuery(result.display_name)}>\r\n              {result.display_name}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n\r\n      <MapContainer\r\n        center={[51.505, -0.09]} // Default coordinates (London)\r\n        zoom={5}\r\n        scrollWheelZoom={true}\r\n        style={{ width: '100%', height: '500px' }}\r\n        whenCreated={setMap} // Get reference to the map object\r\n      >\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        {addMarkers()}\r\n      </MapContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,YAAY,EAAEC,SAAS,EAAEC,MAAM,EAAEC,KAAK,QAAQ,eAAe;AACtE,OAAOC,CAAC,MAAM,SAAS;AACvB,OAAO,0BAA0B;AACjC,SAASC,eAAe,QAAQ,0BAA0B;AAC1D,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACe,WAAW,EAAEC,cAAc,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACiB,aAAa,EAAEC,gBAAgB,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACmB,GAAG,EAAEC,MAAM,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EAEpCC,SAAS,CAAC,MAAM;IACd;IACAO,KAAK,CAACa,GAAG,CAAC,yCAAyC,CAAC,CACjDC,IAAI,CAACC,QAAQ,IAAI;MAChBT,QAAQ,CAACS,QAAQ,CAACC,IAAI,CAAC;IACzB,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACtD,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAME,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChCb,cAAc,CAACa,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;IAE9B,IAAIF,CAAC,CAACC,MAAM,CAACC,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;MAAE;MAC/B;MACA,MAAMT,QAAQ,GAAG,MAAMf,KAAK,CAACa,GAAG,CAAC,4CAA4C,EAAE;QAC7EY,MAAM,EAAE;UACNC,CAAC,EAAEnB,WAAW;UACdoB,MAAM,EAAE,MAAM;UACdC,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MAEFlB,gBAAgB,CAACK,QAAQ,CAACC,IAAI,CAAC;IACjC;EACF,CAAC;;EAED;EACA,MAAMa,UAAU,GAAGA,CAAA,KAAM;IACvB,OAAOxB,KAAK,CAACM,GAAG,CAAC,CAACmB,IAAI,EAAEC,KAAK,kBAC3B7B,OAAA,CAACN,MAAM;MAAaoC,QAAQ,EAAE,CAACF,IAAI,CAACG,QAAQ,EAAEH,IAAI,CAACI,SAAS,CAAE;MAAAC,QAAA,eAC5DjC,OAAA,CAACL,KAAK;QAAAsC,QAAA,EAAEL,IAAI,CAACM;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC,GADfT,KAAK;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEV,CACT,CAAC;EACJ,CAAC;;EAED;EACA/C,SAAS,CAAC,MAAM;IACd,IAAIkB,GAAG,EAAE;MACP;MACAA,GAAG,CAAC8B,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;MAElB;MACA,IAAIhC,aAAa,CAACe,MAAM,GAAG,CAAC,EAAE;QAC5B,MAAMkB,WAAW,GAAGjC,aAAa,CAAC,CAAC,CAAC;QACpCE,GAAG,CAACgC,KAAK,CAAC,CAACD,WAAW,CAACE,GAAG,EAAEF,WAAW,CAACG,GAAG,CAAC,EAAE,EAAE,CAAC;MACnD;IACF;EACF,CAAC,EAAE,CAAClC,GAAG,EAAEF,aAAa,CAAC,CAAC;EAExB,oBACEP,OAAA;IAAAiC,QAAA,gBACEjC,OAAA;MAAAiC,QAAA,gBACEjC,OAAA;QACE4C,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC,sBAAsB;QAClCxB,KAAK,EAAEhB,WAAY;QACnByC,QAAQ,EAAE5B;MAAa;QAAAiB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxB,CAAC,eACFtC,OAAA;QAAAiC,QAAA,EACG1B,aAAa,CAACE,GAAG,CAAC,CAACsC,MAAM,EAAElB,KAAK,kBAC/B7B,OAAA;UAAgBgD,OAAO,EAAEA,CAAA,KAAM1C,cAAc,CAACyC,MAAM,CAACE,YAAY,CAAE;UAAAhB,QAAA,EAChEc,MAAM,CAACE;QAAY,GADbpB,KAAK;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEV,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC,eAENtC,OAAA,CAACR,YAAY;MACX0D,MAAM,EAAE,CAAC,MAAM,EAAE,CAAC,IAAI,CAAE,CAAC;MAAA;MACzBC,IAAI,EAAE,CAAE;MACRC,eAAe,EAAE,IAAK;MACtBC,KAAK,EAAE;QAAEC,KAAK,EAAE,MAAM;QAAEC,MAAM,EAAE;MAAQ,CAAE;MAC1CC,WAAW,EAAE9C,MAAO,CAAC;MAAA;MAAAuB,QAAA,gBAErBjC,OAAA,CAACP,SAAS;QACRgE,GAAG,EAAC,oDAAoD;QACxDC,WAAW,EAAC;MAAyF;QAAAvB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtG,CAAC,EACDX,UAAU,CAAC,CAAC;IAAA;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACZ,CAAC;AAEV,CAAC;AAACpC,EAAA,CA3FID,SAAS;AAAA0D,EAAA,GAAT1D,SAAS;AA6Ff,eAAeA,SAAS;AAAC,IAAA0D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}